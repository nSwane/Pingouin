/*********************  Nawaoui Swane et Giaccone Marc*  classe Moteur*  definition des fonctionnalites du jeu**/package moteur;import liaison.*;import java.awt.*;import java.util.*;import java.io.*;public class Fonctionnalites{	Stack<DonneesPartagees> pileAnnuler;	Stack<DonneesPartagees> pileRefaire;	DonneesPartagees donneesP;		public Fonctionnalites(DonneesPartagees dp){		donneesP = dp;				pileAnnuler = new Stack<DonneesPartagees>();		pileRefaire = new Stack<DonneesPartagees>();	}		//Retourne vrai si le fichier passe en parametre existe	//Retourne faux sinon	public void existeFichier(String nomFichier){		File f = new File("./Sauvegarde/" + nomFichier);		System.out.println("Fonctionnalite : nom fichier : " + ("./Sauvegarde/"+nomFichier));		donneesP.setFichierExiste(f.exists());	}	// methode permettant l'enregistrement d'une partie en cours	public int sauvegarder(String nomFichier){		 try	      {			 //Ouverture du fichier	         FileOutputStream fileOut = new FileOutputStream("./Sauvegarde/"+nomFichier);	         ObjectOutputStream out = new ObjectOutputStream(fileOut);	         	         //Ecriture	         out.writeObject(donneesP);	         out.close();	         	         //Fermeture du fichier	         fileOut.close();	         	         return 0;	      }catch(IOException i)	      {	          i.printStackTrace();	          return -1;	      }	}	//Charger une partie	//retourne -1 en cas d'erreur, 0 en cas de succes'	public DonneesPartagees charger(String nomFichier){		try	      {			System.out.println("[Fonctionnalite] Charger() --> perso ? : " + donneesP.isPartiePerso());			//Ouverture du fichier	         FileInputStream fileIn = new FileInputStream(nomFichier);	         ObjectInputStream in = new ObjectInputStream(fileIn);	         	         //Lecture	         donneesP = (DonneesPartagees) in.readObject();	         	         //Fermeture du fichier	         in.close();	         fileIn.close();	         	         return donneesP;	      }catch(Exception e)	      {	         System.out.println("Chargement : Fichier "+nomFichier+" corrompu");	         return null;	      }	}		//Retourne la liste des fichiers contenu dans le dossier de sauvegarde	public String[] listerFichier(){		File f1 = new File("./Sauvegarde/");		String [] s = f1.list();		return s;	}		//Creation d'une couleur a partir des proportions RVB	public Color parseColor(String c){		int beginIndex;		int endIndex;		String col;		/*Recuperation de la proportion de rouge*/		beginIndex = c.indexOf('=');		endIndex = c.indexOf(',');		col = c.substring(beginIndex+1, endIndex);		int red = Integer.parseInt(col);				/*Recuperation de la proportion de vert*/		beginIndex = c.indexOf('=', endIndex+1);		endIndex = c.indexOf(',', endIndex+1);		col = c.substring(beginIndex+1, endIndex);		int green = Integer.parseInt(col);		/*Recuperation de la proportion de bleu*/		beginIndex = c.indexOf('=', endIndex+1);		endIndex = c.indexOf(']', endIndex+1);		col = c.substring(beginIndex+1, endIndex);		int blue = Integer.parseInt(col);				return new Color(red ,green, blue);	}	//Empiler un contexte pour une eventuelle recuperation	public void empilerAnnuler(DonneesPartagees dp){		donneesP.setAnnulerPossible(true);		pileAnnuler.push(dp);	}		public void viderAnnuler(){		donneesP.setAnnulerPossible(false);		pileAnnuler.clear();	}		public void viderRefaire(){		donneesP.setRefairePossible(false);		pileRefaire.clear();	}		//Annuler un coup --> restauration de la configuration precedente	//--> Score, joueur actuel et etat de la gaufre	//Retourne null s'il n y a rien a annuler,	//Retourne le contexte precedent sinon	public DonneesPartagees annuler(){		System.out.println("[Fonctionnalite] taille de la pile annuler : " + pileAnnuler.size());		try{			//Recuperation du contexte precedent			DonneesPartagees dp = pileAnnuler.pop();			donneesP.setRefairePossible(true);			//Sauvegarde du contexte courant dans la pile refaire			pileRefaire.push(donneesP.copie());						//Mise a jour du contexte courant			donneesP = dp;						return dp;					}catch(Exception e){			donneesP.setAnnulerPossible(false);			System.out.println("Erreur annulation: pile vide");			return null;		}	}	//Faire un coup precedemment annule	//Retourne null s'il n y a rien a refaire,	//Retourne le contexte precedent sinon	public DonneesPartagees refaire(){		System.out.println("[Fonctionnalite] taille de la pile refaire : " + pileRefaire.size());		try{			//Recuperation du contexte precedent			DonneesPartagees dp = pileRefaire.pop();			if(pileRefaire.isEmpty())				donneesP.setRefairePossible(false);//						donneesP.setAnnulerPossible(true);			//Sauvegarde du contexte courant dans la pile annuler			pileAnnuler.push(donneesP.copie());			donneesP = dp;						return dp;		}catch(Exception e){			donneesP.setRefairePossible(false);			System.out.println("Erreur refaire: pile vide");			return null;		}	}		//Quitter la partie en cours	public void quitter(){		System.exit(0);	}	//Le joueur actuel abandonne	public void abandonner(int numeroJoueur){//		Joueur [] tabj = donneesP.getJoueurs();//		tabj[numeroJoueur] = null;	}}